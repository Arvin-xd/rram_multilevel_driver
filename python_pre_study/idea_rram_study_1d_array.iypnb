{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# import plotly.plotly as py\n",
    "import plotly.offline\n",
    "from plotly.graph_objs import Scatter, Layout\n",
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "def find_nearest(array, value):\n",
    "    idx = (np.abs(array-value)).argmin()\n",
    "    return array[idx]\n",
    "\n",
    "\n",
    "def find_nearest_sorted(sorted_array, value):\n",
    "    idx = np.searchsorted(sorted_array, value, side=\"left\")\n",
    "    if (idx > 0 and (\n",
    "        idx == len(sorted_array)\n",
    "        or abs(value - sorted_array[idx-1]) < abs(value-sorted_array[idx]))):\n",
    "        return sorted_array[idx-1], idx-1\n",
    "    else:\n",
    "        return sorted_array[idx], idx"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# constants\n",
    "p_kb = 1.3806503e-23 # Boltzmann's constant (J/K)\n",
    "p_q = 1.6e-19  # electron charge(C)\n",
    "\n",
    "# Device parameters\n",
    "# taken from stanford's model\n",
    "p_Rth = 5e5 # 5e5  # unit: K/W   effective thermal resistance\n",
    "# arizona's model\n",
    "p_L = 5e-9   # from (0:inf); # Oxide thickness (m)\n",
    "p_gap_min = 0.1e-9   # from (0:L); # Min. gap distance (m)\n",
    "p_gap_max = 1.7e-9   # from (gap_min:L); # Max. gap distance (m)\n",
    "p_gap_ini = 0.1e-9   # from [gap_min:gap_max];# Initial gap distance (m)\n",
    "p_a0 = 0.25e-9   # from (0:inf); # Atomic distance (m)\n",
    "p_Eag = 1.501   # from (0:inf); # Activation energy for vacancy generation (eV)\n",
    "p_Ear = 1.5   # from (0:inf); # Activation energy for vac. recombination (eV)\n",
    "\n",
    "# I-V characteristics\n",
    "p_I0 = 6.14e-5   # from (0:inf);\n",
    "p_g0 = 2.7505e-10   # from (0:inf);\n",
    "p_V0 = 0.43   # from (0:inf);\n",
    "\n",
    "# Gap dynamics\n",
    "p_Vel0 = 150   # from (0:inf);\n",
    "p_gamma0 = 16.5   # from (0:inf);\n",
    "p_g1 = 1e-9   # from (0:inf);\n",
    "p_beta = 1.25   # from (0:gamma0/(pow(gap_max/g1,3)));\n",
    "\n",
    "# Temperature dynamics\n",
    "p_T0 = 273+25   # from (0:inf);# Ambient temperature (K)\n",
    "p_Cth = 3.1825e-16   # from (0:inf);# Effective thermal capacitance (J/K)\n",
    "p_Tau_th = 2.3e-10   # from (0:inf);# Effective thermal time constant (s)\n",
    "\n",
    "# Voltage parameters\n",
    "v_read = 0.1 # already in voltages array, no interpolation needed\n",
    "v_set = 1.8\n",
    "v_write = 2*v_set\n",
    "v_min = 0.1\n",
    "v_max = v_write\n",
    "# target resistances\n",
    "levels = 32\n",
    "target_r = np.linspace(10e3, 1e6, levels)\n",
    "compatible_r = target_r\n",
    "# grid\n",
    "# g_step = 1e-12\n",
    "# v_step = 1e-1\n",
    "g_step = 1e-11\n",
    "v_step = 1e-2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "plot_3d_r = True\n",
    "plot_3d_g = True\n",
    "plot_r0 = True\n",
    "plot_r_loads = True\n",
    "# configure plotly\n",
    "# creates .plotly/.config and ./plotly/.credentials\n",
    "\n",
    "# plotly.tools.set_credentials_file(username='fmu', api_key='NIDiVLcNRVtwNzBnfpLJ')\n",
    "plotly.tools.set_config_file(world_readable=False,\n",
    "                             sharing='private')\n",
    "# plotly.tools.set_config_file(world_readable=True,\n",
    "#                            sharing='public')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v_m shape: (351,)\n",
      "gaps shape: (161,)\n",
      "XX shape: (161, 351)\n",
      "YY shape: (161, 351)\n"
     ]
    }
   ],
   "source": [
    "voltages_number = int((v_max - v_min)/v_step + 1)\n",
    "gaps_number = int((p_gap_max - p_gap_min)/g_step + 1)\n",
    "v_m = np.linspace(v_min, v_max, voltages_number)\n",
    "gaps = np.linspace(p_gap_min, p_gap_max, gaps_number)\n",
    "# v_m = np.array([np.linspace(v_min, v_max, voltages_number)]).T\n",
    "# gaps = np.array([np.linspace(p_gap_min, p_gap_max, gaps_number)]).T\n",
    "XX, YY = np.meshgrid(v_m, gaps)\n",
    "print('v_m shape: ' + str(v_m.shape))\n",
    "print('gaps shape: ' + str(gaps.shape))\n",
    "print('XX shape: ' + str(XX.shape))\n",
    "print('YY shape: ' + str(YY.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "------------------------------\n",
      "- 2D-Data structures:        -\n",
      "-   rows:    gaps            -\n",
      "-   columns: voltages        -\n",
      "------------------------------\n",
      "\n",
      "\n",
      "\n",
      "eq_current shape: (161, 351)\n",
      "eq_resistance shape: (161, 351)\n"
     ]
    }
   ],
   "source": [
    "print('------------------------------')\n",
    "print('- 2D-Data structures:        -')\n",
    "print('-   rows:    gaps            -')\n",
    "print('-   columns: voltages        -')\n",
    "print('------------------------------')\n",
    "print('\\n\\n')\n",
    "#\n",
    "# idea\n",
    "# r = v./(p_I0*exp(-g/p_g0)*sinh(v/p_V0))\n",
    "# \n",
    "# def resistance(v, g):\n",
    "#     return v/(p_I0*math.exp(-g/p_g0)*math.sinh(v/p_V0))\n",
    "# with outer\n",
    "eq_current = np.outer(p_I0*np.exp(-gaps/p_g0), np.sinh(v_m/p_V0))\n",
    "# problem: \n",
    "eq_current_2 = np.outer(np.sinh(v_m/p_V0), p_I0*np.exp(-gaps/p_g0)).T\n",
    "print('eq_current shape: ' + str(eq_current.shape))\n",
    "\n",
    "# with matrix like multiplication\n",
    "# eq_current_2 = np.array([np.sinh(v_m/p_V0)]).T * np.array(p_I0*np.exp(-gaps/p_g0)).T\n",
    "# print(eq_current-eq_current_2)\n",
    "# element wise division\n",
    "# eq_resistance = np.divide(v_m, eq_current.T).T\n",
    "eq_resistance = np.divide(v_m, eq_current)\n",
    "print('eq_resistance shape: ' + str(eq_resistance.shape))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "if plot_3d_r:\n",
    "    data_3d_r = [\n",
    "        plotly.graph_objs.Surface(\n",
    "            x=XX,\n",
    "            y=YY,\n",
    "            z=eq_resistance,  # z_data.as_matrix(),\n",
    "            name='RRAM resistance vs gap and voltage'\n",
    "        )\n",
    "    ]\n",
    "    layout_3d_r = plotly.graph_objs.Layout(\n",
    "#         scene=plotly.graph_objs.Scene(\n",
    "#             xaxis=plotly.graph_objs.XAxis(title='applied voltage [V]'),\n",
    "#             yaxis=plotly.graph_objs.YAxis(title='gap [m]'),\n",
    "#             zaxis=plotly.graph_objs.ZAxis(title='equivalent resistance [ohm]')\n",
    "#         ),\n",
    "        title='Read resistance: gap vs read_voltage'\n",
    "    )\n",
    "    fig_r = plotly.graph_objs.Figure(data=data_3d_r, layout=layout_3d_r)\n",
    "    plotly.offline.plot(fig_r, filename = 'read_resistance_3d.html')\n",
    "    \n",
    "    data_3d_i = [\n",
    "        plotly.graph_objs.Surface(\n",
    "            x=XX,\n",
    "            y=YY,\n",
    "            z=eq_current,  # z_data.as_matrix(),\n",
    "            name='RRAM current vs gap and voltage'\n",
    "        )\n",
    "    ]\n",
    "    layout_3d_i = plotly.graph_objs.Layout(\n",
    "#         scene=plotly.graph_objs.Scene(\n",
    "#             xaxis=plotly.graph_objs.XAxis(title='applied voltage [V]'),\n",
    "#             yaxis=plotly.graph_objs.YAxis(title='gap [m]'),\n",
    "#             zaxis=plotly.graph_objs.ZAxis(title='current [A]')\n",
    "#         ),\n",
    "        title='RRAM current: gap vs read_voltage'\n",
    "    )\n",
    "    fig_i = plotly.graph_objs.Figure(data=data_3d_i, layout=layout_3d_i)\n",
    "    plotly.offline.plot(fig_i, filename = 'eq_current_3d.html')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "gamma shape: (161,)\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "operands could not be broadcast together with shapes (161,) (351,) ",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-18-077c1bb47da7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mgamma\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mp_gamma0\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mp_beta\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpower\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgaps\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mp_g1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'gamma shape: '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mgamma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshape\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m \u001b[0mgap_1\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mp_q\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mp_Eag\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mp_kb\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mtemperature\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmultiply\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mgamma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv_m\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mp_a0\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mp_L\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mp_q\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mp_kb\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mtemperature\u001b[0m \u001b[0;34m)\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m \u001b[0mgap_2\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mp_q\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mp_Ear\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mp_kb\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mtemperature\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mexp\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmultiply\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m-\u001b[0m\u001b[0mgamma\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mv_m\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mp_a0\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mp_L\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mp_q\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mp_kb\u001b[0m\u001b[0;34m/\u001b[0m\u001b[0mtemperature\u001b[0m \u001b[0;34m)\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0mgap_ddt\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0mp_Vel0\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0;34m(\u001b[0m \u001b[0mgap_1\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mgap_2\u001b[0m \u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: operands could not be broadcast together with shapes (161,) (351,) "
     ]
    }
   ],
   "source": [
    "# gap study:\n",
    "#\n",
    "# Formula:\n",
    "# gap_ddt = -Vel0*( exp(-q*Eag/kb/temperature)*exp(gamma*a0/L*q*V(Nt,Nb)/kb/temperature) - exp(-q*Ear/kb/temperature)*exp(-gamma*a0/L*q*V(Nt,Nb)/kb/temperature) );\n",
    "\n",
    "\n",
    "# gap_ddt temperature constant\n",
    "#\n",
    "temperature = p_T0\n",
    "gamma = p_gamma0 - p_beta*np.power(gaps/p_g1, 3)\n",
    "print('gamma shape: ' + str(gamma.shape))\n",
    "gap_1 = np.exp(-p_q*p_Eag/p_kb/temperature)*np.exp( np.outer( gamma, v_m*p_a0/p_L*p_q/p_kb/temperature ) )\n",
    "gap_2 = np.exp(-p_q*p_Ear/p_kb/temperature)*np.exp( np.outer(-gamma, v_m*p_a0/p_L*p_q/p_kb/temperature ) )\n",
    "gap_ddt = -p_Vel0*( gap_1 - gap_2 )\n",
    "gap_ddt_th = 1500\n",
    "gap_ddt[gap_ddt > gap_ddt_th] = gap_ddt_th\n",
    "gap_ddt[gap_ddt < -gap_ddt_th] = -gap_ddt_th\n",
    "print('gap_ddt shape: ' + str(gap_ddt.shape))\n",
    "\n",
    "# gap_ddt temp\n",
    "#\n",
    "# gap_ddt = -Vel0*( exp(-q*Eag/kb/temperature)*exp(gamma*a0/L*q*V(Nt,Nb)/kb/temperature) - exp(-q*Ear/kb/temperature)*exp(-gamma*a0/L*q*V(Nt,Nb)/kb/temperature) );\n",
    "temperature = p_T0 + abs( np.multiply(v_m, eq_current.T).T )* p_Rth\n",
    "gamma = p_gamma0 - p_beta*np.power(gaps/p_g1, 3)\n",
    "# print('temperature shape: ' + str(temperature.shape))\n",
    "# print('gamma shape: ' + str(gamma.shape))\n",
    "\n",
    "gap_ddt_aux_1 = np.exp(-p_q*p_Eag/p_kb/temperature)\n",
    "# print('gap_ddt_aux_1 shape: ' + str(gap_ddt_aux_1.shape))\n",
    "gap_ddt_aux_2 = np.outer(gamma, v_m).T*p_a0/p_L*p_q/p_kb  # with outer\n",
    "# gap_ddt_aux_2 = (np.array([gamma]).T * np.array([v_m])).T *p_a0/p_L*p_q/p_kb\n",
    "# print('gap_ddt_aux_2 shape: ' + str(gap_ddt_aux_2.shape))\n",
    "gap_ddt_aux_3 = np.exp( np.divide(  gap_ddt_aux_2, temperature ) )\n",
    "# print('gap_ddt_aux_3 shape: ' + str(gap_ddt_aux_3.shape))\n",
    "gap_ddt_aux_4 = np.exp( np.divide(  -gap_ddt_aux_2, temperature ) )\n",
    "# print('gap_ddt_aux_4 shape: ' + str(gap_ddt_aux_4.shape))\n",
    "gap_1 = np.multiply(gap_ddt_aux_1, gap_ddt_aux_3)\n",
    "gap_2 = np.multiply(gap_ddt_aux_1,gap_ddt_aux_4)\n",
    "gap_ddt_2 = -p_Vel0*( gap_1 - gap_2 )\n",
    "gap_ddt_th = 1500\n",
    "gap_ddt_2[gap_ddt_2 > gap_ddt_th] = gap_ddt_th\n",
    "gap_ddt_2[gap_ddt_2 < -gap_ddt_th] = -gap_ddt_th\n",
    "print('gap_ddt_2 shape: ' + str(gap_ddt_2.shape))\n",
    "\n",
    "if plot_3d_g:\n",
    "\n",
    "    data_3d_t = [\n",
    "        plotly.graph_objs.Surface(\n",
    "            x=XX,\n",
    "            y=YY,\n",
    "            z=temperature,  # z_data.as_matrix(),\n",
    "            name='temperature'\n",
    "        )\n",
    "    ]\n",
    "    layout_3d_t = plotly.graph_objs.Layout(\n",
    "        scene=plotly.graph_objs.Scene(\n",
    "            xaxis=plotly.graph_objs.XAxis(title='applied voltage [V]'),\n",
    "            yaxis=plotly.graph_objs.YAxis(title='gap [m]'),\n",
    "            zaxis=plotly.graph_objs.ZAxis(title='temperature [K]')\n",
    "        ),\n",
    "        title='temperature: gap vs read_voltage'\n",
    "    )\n",
    "    fig_t = plotly.graph_objs.Figure(data=data_3d_t, layout=layout_3d_t)\n",
    "    plotly.offline.plot(fig_t, filename = 'temperature.html')\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# read resistance for v=v_read\n",
    "resistance_0 = eq_resistance[0:, 0]\n",
    "closest_v, target_v_idx = find_nearest_sorted(v_m, v_read)\n",
    "# update v_read\n",
    "v_read = closest_v\n",
    "resistance_0 = eq_resistance[0:, target_v_idx]\n",
    "\n",
    "# target gaps\n",
    "compatible_g = np.zeros(target_r.shape)\n",
    "compatible_g_idx = np.zeros(target_r.shape)\n",
    "# find target gaps for each target resistance at v_read\n",
    "for r_idx, r in enumerate(target_r):\n",
    "    new_r, g_idx = find_nearest_sorted(resistance_0, r)\n",
    "    compatible_g_idx[r_idx] = g_idx\n",
    "    compatible_r[r_idx] = new_r\n",
    "    compatible_g[r_idx] = gaps[g_idx]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# System eq.\n",
    "# v_write / (r_m + r_s) = v_control/r_s\n",
    "# r_m = f( gap, v_m ) = f( gap, v_write - v_control )\n",
    "\n",
    "# # of gaps\n",
    "eq_r_r = eq_resistance.shape[0]\n",
    "print('number of evaluated gaps: ' + str(eq_r_r))\n",
    "# # of voltages\n",
    "eq_r_c = eq_resistance.shape[1]\n",
    "print('numbed of evaluated voltages: ' + str(eq_r_c))\n",
    "# find v_control and r_s that guarantees\n",
    "# v_write / (r_m + r_s) = v_control/r_s\n",
    "# v_control = i_m * r_s\n",
    "for j in range(0, levels): # for each required gap\n",
    "    g_idx = int(compatible_g_idx[j]) # get the gap index\n",
    "    error = np.inf\n",
    "    v_control = 0\n",
    "    v_idx = 0\n",
    "    for i in range(0, eq_r_r):  # find the voltage closer that\n",
    "        req_v_control = v_write /2  #- v_m[i]  # v_m[i] = eq_current[i,g_idx]*eq_resistance[i,g_idx]\n",
    "        req_rs = req_v_control / eq_current[i,g_idx]\n",
    "        \n",
    "        new_error = abs(req_v_control-v_m[i])\n",
    "        if( new_error < error ):\n",
    "            error = new_error\n",
    "            v_control = req_v_control\n",
    "            v_idx = i\n",
    "            r_s = req_rs\n",
    "    # better option is:\n",
    "    print('[level ' + str(j) + ']' )\n",
    "    print('\\tgap: ' + str(gaps[g_idx]))\n",
    "    print('\\tr_target: ' + str(compatible_r[j]) + ' r_s:'  + str(r_s))\n",
    "    print('\\tv_control_calculated:' + str(v_control) + ' v_grid:' + str(v_m[v_idx]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# find resistance for v=v_set\n",
    "closest_v, target_v_idx = find_nearest_sorted(voltages, v_set)\n",
    "# update v_set\n",
    "v_set = closest_v\n",
    "resistance_f = eq_resistance[0:, target_v_idx]\n",
    "\n",
    "print('v_set: ' + str(v_set) + ' V')\n",
    "\n",
    "# compute required resistances\n",
    "req_resistances = np.zeros(levels)\n",
    "for r_idx, r in enumerate(target_r):\n",
    "    # get desired gap\n",
    "    closest_r, target_g_idx = find_nearest_sorted(resistance_0, r)\n",
    "    # update target_r\n",
    "    req_resistances[r_idx] = resistance_f[target_g_idx]\n",
    "    target_g = gaps[target_g_idx] # desired gap\n",
    "    print('\\ndesired gap:' + str(target_g) + '[m], '\n",
    "          + 'related to \\n\\tv_read resistance ' + str(resistance_0[target_g_idx]) + ' [ohms]'\n",
    "          + 'related to \\n\\tv_set resistance ' + str(resistance_f[target_g_idx]) + ' [ohms]')\n",
    "\n",
    "# get exponential fit\n",
    "# a, b = np.polyfit(gaps, np.log(resistance_0), 1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "if plot_r0:\n",
    "    data_r0 = [\n",
    "        plotly.graph_objs.Scatter(\n",
    "            x=gaps,\n",
    "            y=resistance_0,\n",
    "            mode='lines+markers',\n",
    "            name='v_read_resistance'\n",
    "        ),\n",
    "        plotly.graph_objs.Scatter(\n",
    "            x=gaps,\n",
    "            y=resistance_f,\n",
    "            mode='lines+markers',\n",
    "            name='v_set_resistance'\n",
    "        )\n",
    "    ]\n",
    "    \n",
    "    layout_r0 = plotly.graph_objs.Layout(\n",
    "        title='Resistances at v_set and v_read',\n",
    "        xaxis=dict(\n",
    "            title='Gap [m]',\n",
    "            titlefont=dict(\n",
    "                family='Courier New, monospace',\n",
    "                size=18,\n",
    "                color='#7f7f7f'\n",
    "            )\n",
    "        ),\n",
    "        yaxis=dict(\n",
    "            title='Resistance [ohm]',\n",
    "            titlefont=dict(\n",
    "                family='Courier New, monospace',\n",
    "                size=18,\n",
    "                color='#7f7f7f'\n",
    "            )\n",
    "        )\n",
    "    )\n",
    "    fig_r0 = plotly.graph_objs.Figure(data=data_r0, layout=layout_r0)\n",
    "    plotly.offline.plot(fig_r0, filename = 'read_resistance.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "if plot_r_loads:\n",
    "    data_r_loads = [\n",
    "        plotly.graph_objs.Scatter(\n",
    "            x=target_r,\n",
    "            y=eq_resistance,\n",
    "            mode='lines+markers',\n",
    "            name='v_read_resistance'\n",
    "        )\n",
    "        # ,\n",
    "        # plotly.graph_objs.Scatter(\n",
    "        #         x=target_r,\n",
    "        #         y=np.log(req_resistances),\n",
    "        #         mode='lines+markers',\n",
    "        #         name='LOG v_read_resistance'\n",
    "        # )\n",
    "    ]\n",
    "    \n",
    "    \n",
    "    layout_r_loads = plotly.graph_objs.Layout(\n",
    "        xaxis=dict(\n",
    "            type='linear',\n",
    "            autorange=True,\n",
    "            title='Target Resistance [ohm]',\n",
    "            titlefont=dict(\n",
    "                family='Courier New, monospace',\n",
    "                size=18,\n",
    "                color='#7f7f7f'\n",
    "            )\n",
    "        ),\n",
    "        yaxis=dict(\n",
    "            type='linear',\n",
    "            autorange=True,\n",
    "            title='Load Resistance [ohm]',\n",
    "            titlefont=dict(\n",
    "                family='Courier New, monospace',\n",
    "                size=18,\n",
    "                color='#7f7f7f'\n",
    "            )\n",
    "        )\n",
    "    )\n",
    "    \n",
    "    fig = plotly.graph_objs.Figure(data=data_r_loads, layout=layout_r_loads)\n",
    "    plotly.offline.plot(fig, filename = 'load_resistance.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "# v_gate\n",
    "plot_v_gate = True\n",
    "\n",
    "if plot_v_gate:\n",
    "    aux_x = np.linspace(0, 2*v_set, 200)\n",
    "    a=100\n",
    "    aux_y = 1/(1+np.exp(a*(aux_x-v_set)))\n",
    "    data_v_gate = [\n",
    "        plotly.graph_objs.Scatter(\n",
    "            x=aux_x,\n",
    "            y=aux_y,\n",
    "            mode='lines+markers',\n",
    "            name='v_gate'\n",
    "        )\n",
    "    ]\n",
    "\n",
    "    plotly.offline.plot(data_v_gate, filename = 'v_gate.html')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [default]",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
